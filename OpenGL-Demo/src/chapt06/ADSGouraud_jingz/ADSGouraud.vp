#version 330

//由OpenGL管线的上一阶段输入每个顶点的位置和法向
in vec4 vVertex;
in vec3 vNormal;

//设置每个批次的常量,每次渲染前C++代码初始化
uniform vec4 ambientColor;//环境光颜色
uniform vec4 diffuseColor;//	球体颜色
uniform vec4 specularColor;// 材质颜色属性
uniform vec3 vLightPosition; 
uniform mat4 mvpMatrix;
uniform mat4 mvMatrix;
uniform mat3 normalMatrix;

smooth out vec4 vVaryingColor;

void main(void)
{
	// normalMatrix 是模型在世界坐标系中的朝向矩阵
	//作用法线之后，法线就是其在世界坐标中的朝向
	vec3 vEyeNormal = normalMatrix * vNormal;
	//顶点相对于世界原点的位置――即世界位置；mv是摄像机（画刷）到模型的3D定位作用矩阵
	vec4 vPosition4 = mvMatrix * vVertex;
	vec3 vPosition3 = vPosition4.xyz/vPosition4.w;
	
	vec3 vLightDir = normalize(vLightPosition - vPosition3);

	//计算点光源给物体的颜色加成
	float diff = max(0.0,dot(vEyeNormal,vLightDir));

	vVaryingColor = diff * diffuseColor;
	vVaryingColor.a = diffuseColor.a;

	//计算环境光加成
	vVaryingColor += ambientColor;

	//计算材质镜面光加成
	vec3 vReflection = normalize(reflect(-vLightDir,vEyeNormal));//放射光方向
	float spec = max(0.0f,dot(vEyeNormal,vReflection));
	if(diff != 0)
	{
		float fSpec = pow(spec,128.0);//默认镜面反光度属性shininess 128
		vVaryingColor.rgb += vec3(fSpec,fSpec,fSpec);
	}


	gl_Position = mvpMatrix * vVertex;
}